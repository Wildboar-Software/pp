/* template.chan: template of a typical PP channel */

# ifndef lint
static char Rcsid[] = "@(#)$Header$";
# endif

/*
 * $Header$
 *
 * $Log$
 */


#include "util.h"
#include "qmgr.h"
#include "q.h"
#include "prm.h"
#include "retcode.h"

static void dirinit();
static int initialise();
static int endfunc();
static struct type_Qmgr_DeliveryStatus *process();
static ADDR *getnthrecip ();

CHAN	*mychan;
char	*this_msg = NULLCP, *this_chan = NULLCP;
int	first_successDR, first_failureDR;

main (argc, argv)
int	argc;
char	**argv;
{
	sys_init (argv[0]);
	dirinit();

#ifdef PP_DEBUG
	if (argc > 1 && strcmp (argv[1], "debug") == 0)
		debug_channel_control (argc,argv,initialise,process,endfunc);
	else
#endif
		channel_control (argc,argv,initialise,process,endfunc);
}

/*  */
/* move to correct place in file system */

extern char	*quedfldir;

static void dirinit ()
{
	if (chdir (quedfldir) < 0)
		err_abrt (RP_LIO,
			  "Unable to change directory to '%s'",
			  quedfldir);
}

/*  */
/* channel initialisation routine */

static void parse_ch_info();

static int initialise (arg)
struct type_Qmgr_Channel	*arg;
{
	char	*name;
	name = qb2str (arg);

	if ((mychan = ch_nm2struct (name)) == NULLCHAN) {
		PP_OPER (NULLCP, ("Channel '%s' not known", name));
		if (name != NULLCP) free(name);
		return NOTOK;
	}

	if (name != NULLCP) free(name);
	
	if (mychan->ch_out_info != NULLCP)
		parse_ch_info (mychan->ch_out_info);

	return OK;
}

/* parse the info string and set the global variables */
static void parse_ch_info(info)
char	*info;
{
	char	*info_copy, *margv[20];
	int	margc, ix;

	if (info == NULLCP) return;

	info_copy = strdup(info);

	if ((margc = sstr2arg (info_copy, 20, margv, ",")) > 0) {
		for (ix = 0; ix < margc; ix++) {
			/* check each entry in info string */
		}
	}
	free(info_copy);
}

/*  */
/* channel termination routine */

static int endfunc (arg)
struct type_Qmgr_Channel *arg;
{
}

/*  */
/* channel work routine */

static int security_check (msg)
struct type_Qmgr_ProcMsg *msg;
{
	if (this_msg) free(this_msg);
	this_msg = qb2str (msg->qid);
	
	if (this_chan) free(this_chan);
	this_chan = qb2str (msg->channel);
	
	if (mychan == NULLCHAN
	    || strcmp (this_chan, mychan->ch_name) != 0) {
		PP_LOG (LLOG_EXCEPTIONS,
			("channel error: '%s'",
			 this_chan));
		return FALSE;
	}

	return TRUE;
}

static struct type_Qmgr_DeliveryStatus *process (arg)
struct type_Qmgr_ProcMsg *arg;
{
	struct prm_vars			prm;
	Q_struct			que;
	ADDR				*sender = NULLADDR;
	ADDR				*recips = NULLADDR;
	ADDR				*adr;
	int				rcount, retval;
	struct type_Qmgr_UserList	*ix;

	bzero ((char *)&prm, sizeof (prm));
	bzero ((char *)&que, sizeof (que));

	delivery_init (arg->users);
	delivery_setall (int_Qmgr_status_messageFailure);
	first_failureDR = first_successDR = TRUE;

	if (security_check (arg) != TRUE)
		return deliverystate;

	PP_LOG (LLOG_NOTICE,
		("processing msg '%s' through '%s'",
		 this_msg, this_chan));

	/* read in message */
	if (rp_isbad (rd_msg (this_msg, &prm, &que,
			      &sender, &recips, &rcount))) {
		PP_LOG (LLOG_EXCEPTIONS,
			("rd_msg error: '%s'", this_msg));
		rd_end();
		return delivery_setallstate(int_Qmgr_status_messageFailure,
					    "Can't read message");
	}

	/* process recipients individually */
	for (ix = arg->users; ix; ix = ix->next) {
		if ((adr = getnthrecip (&que, ix->RecipientId->parm)) == NULLADDR) {
			PP_LOG (LLOG_EXCEPTIONS,
				("failed to find recipient %d of msg '%s'",
				 ix->RecipientId->parm, this_msg));
			delivery_setstate (ix->RecipientId->parm,
					   int_Qmgr_status_messageFailure,
					   "Unable to find specified recipient");
			continue;
		}
		
		switch (chan_acheck (adr, mychan, 1, (char **)NULL)) {
		    default:
		    case NOTOK:
			break;
		    case OK:
			processAddr (this_msg, &prm, &que, adr);
			break;
		}
	}

	/* write results of processing */

	if (rp_isbad (retval = wr_q2dr (&que, this_msg))) {
		PP_LOG (LLOG_EXCEPTIONS,
			("%s wr_q2dr failure '%d'",
			 mychan->ch_name, retval));
		(void) delivery_resetDRs (int_Qmgr_status_messageFailure);
	}

	rd_end ();
	q_free(&que);
	prm_free (&prm);
	
	return deliverystate;
}

/*  */
/* do processing for specified recip */

static int processAddr (msg, prm, qp, recip)
char		*msg;
struct prm_vars	*prm;
Q_struct	*qp;
ADDR		*recip;
{
}

static ADDR *getnthrecip(que, num)
Q_struct	*que;
int		num;
{
	ADDR *ix = que->Raddress;

	if (num == 0)
		return que->Oaddress;
	while ((ix != NULL) && (ix->ad_no != num))
		ix = ix->ad_next;
	return ix;
}
