.TH MU 1
.\" @(#) $Header: /xtel/pp/pp-beta/man/man1/RCS/mu.1,v 6.0 1991/12/18 20:43:41 jpo Rel $
.\"
.\" $Log: mu.1,v $
.\" Revision 6.0  1991/12/18  20:43:41  jpo
.\" Release 6.0
.\"
.\"
.\"
.SH NAME
mu \- message submission tool
.SH SYNOPSIS
.in +.5i
.ti -.5i
mu
\%[\-default\ file] \%[\-file\ file] \%[\-value\ value] \%[\-body\ file] 
\%[\-tree\ directory] \%[\-logfile\ file] \%[\-confirm] \%[\-nofix] \%[\-help]
\%[\-\-] \%[\-0] \%[\-1] \%[\-2] \%[\-3] \%[\-4] \%[\-5] 
.in -.5i
.SH DESCRIPTION
This is a special user interface, provided as a general tool to help
test \fIsubmit\fP and consequent operations in PP.  It may be used to
re-submit a modified text-encoded file taken from the queue.

The message submission tool \fImu\fP takes input from the command
line, a defaults file \fImu.defaults\fP if present in the working directory,
otherwise from the default command directory \fIcmddfldir\fP (as
specified in the top level Makefile & static.c) and then
any other files specified with \fI\-file\fP flags.
Any command line option may be placed on a
line within an input file.  \fImu\fP calls its command line parser
recursively when it encounters a line starting with \fI`\-'\fP.
Any line starting with \fI`#'\fP is
ignored.  Otherwise, all lines are offered to the various
\fIsubmit\fP input routines in turn for incorporation into PP's
internal message structures (\fIprm\_vars, Qstruct and ADDR\fP).  
Any line which returns an error code (\fIrp_isbad\fP)
from all these routines is assumed to be in error.
Flags may be abbreviated to single letters.
.PP
The command line options are summarised below.
.TP
\-default
Use file instead of \fImu.defaults\fP for initial input.
.TP
\-file
Read input from file.
.TP
\-value
Assign message parameter value on command line (rather than within an 
input file).
.TP
\-body
Specify message body part file.
.TP
\-tree
Specify directory containing tree-structured message.
.TP
\-logfile
Output progress and error messages to logfile instead of stdout.
.TP
\-confirm
Prompt user for y/n confirmation after interactive input. (See below.)
.TP
\-nofix
Ignore errors in user input. (See below.)
.TP
\-help or \-\-
Print summary of flag table entries.
.TP
Various debug and control flags :
.TP
\-0
log progress messages, and PPLOG(LLOG\_TRACE ...)
.TP
\-1
log command files as they are processed, and PPLOG(LLOG\_DEBUG ...)
.TP
\-2
list body part files as they are io\_tdata'ed
.TP
\-3
list message structures prior to submit io\_ calls
.TP
\-4
abort prior to submit io\_ calls
.TP
\-5
append to logfile rather than overwrite
.PP
The input lines which specify message parameter assignments may
be received in any sequence, and inputs may override earlier entries.
Any value may also be assigned on the (original) command line with
\fI\-value v1 v2 ... \fP up to the next flag.
.PP
If input files are nested, input lines from the nested file are
processed before the remainder of the file containing the \fI\-file\fP
specifier.  The default file is parsed first (\fImu.defaults\fP
unless overridden with a \fI\-default\fP flag on the command line),
then any \fI\-file\fP specified files from the command line, finally
\fI\-value\fP specifications from the command line.  Body part files
may be specified with \fI\-body\fP commands, either on the command
line or embedded as with other commands.
.PP
\fImu\fP uses PP's standard logging \- additional logging messages generated by
\-0 \-1 \-2 \-3 flags are output to a channel (\fImuout\fP) which defaults to \fIstdout\fP
unless flag \fI\-logfile\fP is specified.  Note that output may be re-routed
in the course of processing input files.  The flag \-5 allows
these messages to be appended to the nominated logfile, rather than
replacing it.
.PP
\fImu\fP allows interactive user input.
.sp
The reserved character \fI`$'\fP (TOKENCHAR) is used to indicate that
the user should input a value to replace the \fI`$'\fP, unless the
line is a comment line or the \fI`$'\fP is immediately followed by a
second to escape a real \fI$\fP symbol.  The portion of the input
line up to and including the \fI`$'\fP is displayed on screen, then a
carriage return delimited string is input to replace the \fI`$'\fP.
The substituted line is scanned for further unpaired \fI`$'\fP
characters.  When all have been replaced, if the flag \fI\-confirm\fP
has been specified, the user input will be re-displayed awaiting user
confirmation or cancellation with \fI`y'\fP or \fI`n'\fP.  The line
is then offered to the \fIsubmit\fP input routines.  Any error will
cause the input portions to be re-prompted \fIunless\fP the flag
\fI\-nofix\fP has been specified, in which case \fImu\fP will ignore
the error and continue.
.PP
To allow repeated user input, for example, of multiple recipient
lines, another reserved character \fI`*'\fP (REPEATCHAR) may be
placed at the start of a line to indicate repetition.  If this
character appears at the start of a line which contains no unpaired
\fI`$'\fP characters, an error
.sp
error : no TOKENCHAR(s) in REPEAT line \- REPEATCHAR ignored
.sp
is reported.  Otherwise, user input takes place as before, terminated
by a null input (just a carriage return) on any substitution field
in the line.  Repeat lines are stripped of the \fI`*'\fP character
before passing to the \fIsubmit\fP input routines.
.sp
.SH FILES
.TP
mu.defaults
The default initial inputs file.
.SH "SEE ALSO"
mail(1)
.br
\fIPP Manual \- Volume 1: Installation and Operation\fP
.SH "BUGS"
Too complicated.
